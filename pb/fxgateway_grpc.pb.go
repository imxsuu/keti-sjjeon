// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: fxgateway.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FxGatewayClient is the client API for FxGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FxGatewayClient interface {
	Invoke(ctx context.Context, in *InvokeServiceRequest, opts ...grpc.CallOption) (*Message, error)
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Functions, error)
	Deploy(ctx context.Context, in *CreateFunctionRequest, opts ...grpc.CallOption) (*Message, error)
	Delete(ctx context.Context, in *DeleteFunctionRequest, opts ...grpc.CallOption) (*Message, error)
	Update(ctx context.Context, in *CreateFunctionRequest, opts ...grpc.CallOption) (*Message, error)
	GetMeta(ctx context.Context, in *FunctionRequest, opts ...grpc.CallOption) (*Function, error)
	GetLog(ctx context.Context, in *FunctionRequest, opts ...grpc.CallOption) (*Message, error)
	ReplicaUpdate(ctx context.Context, in *ScaleServiceRequest, opts ...grpc.CallOption) (*Message, error)
	Info(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Message, error)
	HealthCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Message, error)
}

type fxGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewFxGatewayClient(cc grpc.ClientConnInterface) FxGatewayClient {
	return &fxGatewayClient{cc}
}

func (c *fxGatewayClient) Invoke(ctx context.Context, in *InvokeServiceRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/pb.FxGateway/Invoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fxGatewayClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Functions, error) {
	out := new(Functions)
	err := c.cc.Invoke(ctx, "/pb.FxGateway/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fxGatewayClient) Deploy(ctx context.Context, in *CreateFunctionRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/pb.FxGateway/Deploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fxGatewayClient) Delete(ctx context.Context, in *DeleteFunctionRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/pb.FxGateway/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fxGatewayClient) Update(ctx context.Context, in *CreateFunctionRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/pb.FxGateway/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fxGatewayClient) GetMeta(ctx context.Context, in *FunctionRequest, opts ...grpc.CallOption) (*Function, error) {
	out := new(Function)
	err := c.cc.Invoke(ctx, "/pb.FxGateway/GetMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fxGatewayClient) GetLog(ctx context.Context, in *FunctionRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/pb.FxGateway/GetLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fxGatewayClient) ReplicaUpdate(ctx context.Context, in *ScaleServiceRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/pb.FxGateway/ReplicaUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fxGatewayClient) Info(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/pb.FxGateway/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fxGatewayClient) HealthCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/pb.FxGateway/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FxGatewayServer is the server API for FxGateway service.
// All implementations must embed UnimplementedFxGatewayServer
// for forward compatibility
type FxGatewayServer interface {
	Invoke(context.Context, *InvokeServiceRequest) (*Message, error)
	List(context.Context, *Empty) (*Functions, error)
	Deploy(context.Context, *CreateFunctionRequest) (*Message, error)
	Delete(context.Context, *DeleteFunctionRequest) (*Message, error)
	Update(context.Context, *CreateFunctionRequest) (*Message, error)
	GetMeta(context.Context, *FunctionRequest) (*Function, error)
	GetLog(context.Context, *FunctionRequest) (*Message, error)
	ReplicaUpdate(context.Context, *ScaleServiceRequest) (*Message, error)
	Info(context.Context, *Empty) (*Message, error)
	HealthCheck(context.Context, *Empty) (*Message, error)
	mustEmbedUnimplementedFxGatewayServer()
}

// UnimplementedFxGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedFxGatewayServer struct {
}

func (UnimplementedFxGatewayServer) Invoke(context.Context, *InvokeServiceRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invoke not implemented")
}
func (UnimplementedFxGatewayServer) List(context.Context, *Empty) (*Functions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedFxGatewayServer) Deploy(context.Context, *CreateFunctionRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deploy not implemented")
}
func (UnimplementedFxGatewayServer) Delete(context.Context, *DeleteFunctionRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFxGatewayServer) Update(context.Context, *CreateFunctionRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedFxGatewayServer) GetMeta(context.Context, *FunctionRequest) (*Function, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedFxGatewayServer) GetLog(context.Context, *FunctionRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLog not implemented")
}
func (UnimplementedFxGatewayServer) ReplicaUpdate(context.Context, *ScaleServiceRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicaUpdate not implemented")
}
func (UnimplementedFxGatewayServer) Info(context.Context, *Empty) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedFxGatewayServer) HealthCheck(context.Context, *Empty) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedFxGatewayServer) mustEmbedUnimplementedFxGatewayServer() {}

// UnsafeFxGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FxGatewayServer will
// result in compilation errors.
type UnsafeFxGatewayServer interface {
	mustEmbedUnimplementedFxGatewayServer()
}

func RegisterFxGatewayServer(s grpc.ServiceRegistrar, srv FxGatewayServer) {
	s.RegisterService(&FxGateway_ServiceDesc, srv)
}

func _FxGateway_Invoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvokeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FxGatewayServer).Invoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FxGateway/Invoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FxGatewayServer).Invoke(ctx, req.(*InvokeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FxGateway_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FxGatewayServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FxGateway/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FxGatewayServer).List(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FxGateway_Deploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FxGatewayServer).Deploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FxGateway/Deploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FxGatewayServer).Deploy(ctx, req.(*CreateFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FxGateway_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FxGatewayServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FxGateway/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FxGatewayServer).Delete(ctx, req.(*DeleteFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FxGateway_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FxGatewayServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FxGateway/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FxGatewayServer).Update(ctx, req.(*CreateFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FxGateway_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FxGatewayServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FxGateway/GetMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FxGatewayServer).GetMeta(ctx, req.(*FunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FxGateway_GetLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FxGatewayServer).GetLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FxGateway/GetLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FxGatewayServer).GetLog(ctx, req.(*FunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FxGateway_ReplicaUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScaleServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FxGatewayServer).ReplicaUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FxGateway/ReplicaUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FxGatewayServer).ReplicaUpdate(ctx, req.(*ScaleServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FxGateway_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FxGatewayServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FxGateway/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FxGatewayServer).Info(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FxGateway_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FxGatewayServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FxGateway/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FxGatewayServer).HealthCheck(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// FxGateway_ServiceDesc is the grpc.ServiceDesc for FxGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FxGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.FxGateway",
	HandlerType: (*FxGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Invoke",
			Handler:    _FxGateway_Invoke_Handler,
		},
		{
			MethodName: "List",
			Handler:    _FxGateway_List_Handler,
		},
		{
			MethodName: "Deploy",
			Handler:    _FxGateway_Deploy_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FxGateway_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _FxGateway_Update_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _FxGateway_GetMeta_Handler,
		},
		{
			MethodName: "GetLog",
			Handler:    _FxGateway_GetLog_Handler,
		},
		{
			MethodName: "ReplicaUpdate",
			Handler:    _FxGateway_ReplicaUpdate_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _FxGateway_Info_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _FxGateway_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fxgateway.proto",
}
